# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

. $PSScriptRoot\..\Add-AnalyzedResultInformation.ps1
function Invoke-AnalyzerSecurityCve-2022-21978 {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [ref]$AnalyzeResults,

        [Parameter(Mandatory = $true)]
        [object]$SecurityObject,

        [Parameter(Mandatory = $true)]
        [object]$DisplayGroupingKey
    )

    $stopWatch = [System.Diagnostics.Stopwatch]::StartNew()
    Write-Verbose "Calling: $($MyInvocation.MyCommand)"

    # Description: Check for CVE-2022-21978 vulnerability
    # Affected Exchange versions: 2013, 2016, 2019
    # Fix:
    # Exchange 2013 CU23 + May 2022 SU + /PrepareDomain or /PrepareAllDomains,
    # Exchange 2016 CU22/CU23 + May 2022 SU + /PrepareDomain or /PrepareAllDomains,
    # Exchange 2019 CU11/CU12 + May 2022 SU + /PrepareDomain or /PrepareAllDomains
    # Workaround: N/A

    # Because this is a security vulnerability in the domain, doesn't matter what version of Exchange is installed, still need to check each domain.
    if ($SecurityObject.IsEdgeServer -eq $false) {
        Write-Verbose "Testing CVE: CVE-2022-21978"

        $cveResults = $SecurityObject.OrgInformation.SecurityResults.CVE202221978
        $domainFailedResults = New-Object 'System.Collections.Generic.List[string]'
        $domainUnknownResults = New-Object 'System.Collections.Generic.List[string]'
        $params = @{
            AnalyzedInformation = $AnalyzeResults
            DisplayGroupingKey  = $DisplayGroupingKey
            Name                = "Security Vulnerability"
            Details             = $null
            DisplayWriteType    = $null
            DisplayTestingValue = "CVE-2022-21978"
        }
        if ($null -ne $cveResults -or
            $cveResults.Count -gt 0) {
            Write-Verbose "Exchange AD permission information found - performing vulnerability testing"
            foreach ($entry in $cveResults) {

                if ($entry.DomainPassed -eq $false -and $entry.UnknownDomain -eq $false) {
                    $domainFailedResults.Add($entry.DomainName)
                } elseif ($entry.UnknownDomain) {
                    $domainUnknownResults.Add($entry.DomainName)
                }
            }
        } else {
            Write-Verbose "Unable to perform CVE-2022-21978 vulnerability testing"
            $params.details = "CVE-2022-21978`r`n`t`tUnable to perform vulnerability testing. If Exchange admins do not have domain permissions this might be expected, please re-run with domain or enterprise admin account. - See: https://aka.ms/HC-May22SU"
            $params.displayWriteType = "Yellow"
        }

        if ($domainFailedResults.Count -gt 0 -or
            $domainUnknownResults.Count -gt 0) {

            $params.Details = "CVE-2022-21978"

            if ($domainFailedResults.Count -eq 0) {
                $params.DisplayWriteType = "Yellow"
            } else {
                $params.DisplayWriteType = "Red"
            }

            if ($domainFailedResults.Count -gt 0) {
                $params.Details += "`r`n`t`tDetected the following domains that are vulnerable: $([string]::Join(",", [array]$domainFailedResults))"
            }

            if ($domainUnknownResults.Count -gt 0) {
                $params.Details += "`r`n`t`tUnable to perform vulnerability testing of the following domains: $([string]::Join(",", [array]$domainUnknownResults))"
                $params.Details += "`r`n`t`tIf Exchange admins do not have domain permissions this might be expected, please re-run with domain or enterprise admin account."
            }

            $params.Details += "`r`n`t`tMore Information: https://aka.ms/HC-May22SU"
        }

        if ($null -ne $params.Details) {
            Add-AnalyzedResultInformation @params
        }
    }
    Write-Verbose "Completed: $($MyInvocation.MyCommand) and took $($stopWatch.Elapsed.TotalSeconds) seconds"
}
