# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

. $PSScriptRoot\..\Add-AnalyzedResultInformation.ps1
. $PSScriptRoot\..\Get-DisplayResultsGroupingKey.ps1
. $PSScriptRoot\Invoke-AnalyzerSecurityCveCheck.ps1
function Invoke-AnalyzerSecurityVulnerability {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [ref]$AnalyzeResults,

        [Parameter(Mandatory = $true)]
        [object]$HealthServerObject,

        [Parameter(Mandatory = $true)]
        [int]$Order
    )

    Write-Verbose "Calling: $($MyInvocation.MyCommand)"
    $keySecurityVulnerability = Get-DisplayResultsGroupingKey -Name "Security Vulnerability"  -DisplayOrder $Order
    $baseParams = @{
        AnalyzedInformation = $AnalyzeResults
        DisplayGroupingKey  = $keySecurityVulnerability
    }

    Invoke-AnalyzerSecurityCveCheck -AnalyzeResults $AnalyzeResults -HealthServerObject $HealthServerObject -DisplayGroupingKey $keySecurityVulnerability

    $allSecurityVulnerabilities = $AnalyzeResults.Value.DisplayResults[$keySecurityVulnerability]
    $securityVulnerabilities = $allSecurityVulnerabilities | Where-Object { $_.Name -ne "IIS module anomalies detected" }
    $iisModule = $allSecurityVulnerabilities | Where-Object { $_.Name -eq "IIS module anomalies detected" }

    if ($null -eq $securityVulnerabilities -and
        ($null -ne $iisModule -or $iisModule.DisplayValue -eq $false)) {
        $params = $baseParams + @{
            Details          = "All known security issues in this version of the script passed."
            DisplayWriteType = "Green"
            AddHtmlDetailRow = $false
        }
        Add-AnalyzedResultInformation @params

        $params = $baseParams + @{
            Name                      = "Security Vulnerabilities"
            Details                   = "None"
            AddDisplayResultsLineInfo = $false
            AddHtmlOverviewValues     = $true
        }
        Add-AnalyzedResultInformation @params
    } elseif ($null -ne $securityVulnerabilities -or
        ($null -ne $iisModule -and $iisModule.DisplayValue -eq $true)) {

        $details = $securityVulnerabilities.DisplayValue |
            ForEach-Object {
                return $_ + "<br>"
            }

        # If details are null, but iisModule is showing a vulnerability,
        # then just provide see IIS Module section
        if ($null -eq $details) { $details = "See IIS module anomalies detected section above" }

        $params = $baseParams + @{
            Name                      = "Security Vulnerabilities"
            Details                   = $details
            DisplayWriteType          = "Red"
            AddDisplayResultsLineInfo = $false
        }
        Add-AnalyzedResultInformation @params

        $params = $baseParams + @{
            Name                      = "Vulnerability Detected"
            Details                   = $true
            AddDisplayResultsLineInfo = $false
            DisplayWriteType          = "Red"
            AddHtmlOverviewValues     = $true
            AddHtmlDetailRow          = $false
        }
        Add-AnalyzedResultInformation @params
    }
}
