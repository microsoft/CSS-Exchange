<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="nodeRunnerSettings" type="Microsoft.Ceres.CoreServices.NodeRunner.NodeRunnerSettings,NodeRunner"/>
  </configSections>
  
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <!-- Semicolon separated list -->
      <!-- Put your custom applications in a separate directory to Juno, under Application -->
      <!-- Will be loaded into the LOAD context -->
      <probing privatePath="Assemblies;Applications\Juno"/>
    </assemblyBinding>
    <gcServer enabled="false"/>
  </runtime>

  <!-- Settings enforced by the node runner itself. -->
  <!-- These settings can also be set using command line arguments with the same name. -->
  <nodeRunnerSettings memoryLimitMegabytes="0"/>

  <!-- The application settings are passed to the node activator as node properties. -->
  <!-- Application settings can also be set using the -add, -remove and -clear command line arguments. -->
  <appSettings>
    <add key="BasePort" value="17000" />
    <add key="TraceLogFile" value="Logs\Trace.log" />
    <add key="AuthorizedUsersGroup" value="WSS_WPG" />
    <add key="AuthorizedAdministratorsGroup" value="WSS_ADMIN_WPG" />
    <add key="GenerationController.DefaultLatency" value="70000" />
    <add key="GenerationController.MaxGenerationSize" value="500" />
    <add key="GenerationController.MaxGenerationVolumePerCell" value="4194304" />
  </appSettings>

  <!--
    Configure .NET trace and debug (System.Diagnostics).
    The node runner does not use the Juno log service and produces diagnostics using System.Diagnostics only.
    The node uses the Juno log service, but if any messages are produced before the log service is initialized,
    these messages are handled by the "bootstrap logger", which sends them to Trace instead.
    -->
  <system.diagnostics>
    <!-- Define trace levels. -->
    <switches>
      <!-- Trace level for node runner itself. -->
      <add name="NodeRunner" value="Info"/>
      
      <!-- Trace level for bootstrap log. -->
      <add name="Bootstrap" value="Info"/>
      
      <!-- Enable debug diagnostics in node runner (same as "debug" command line option) and in bootstrap log. -->
      <add name="Debug" value="0"/>
    </switches>

    <trace autoflush="false" indentsize="4">
      <listeners>
        <!-- Trace to console (initializeData="false" indicates standard output). -->
        <add name="console" type="System.Diagnostics.ConsoleTraceListener" initializeData="false"/>
        <remove name="Default"/>
      </listeners>
    </trace>

<!--
    <sources>
      <source propagateActivity="true" name="System.ServiceModel" switchValue="Warning">
        <listeners>
          <add type ="System.Diagnostics.XmlWriterTraceListener" name="tracelog"
               initializeData="app_tracelog.svclog"
               traceOutputOptions="LogicalOperationStack, Timestamp, ProcessId, Callstack">
            <filter type="" />
          </add>
        </listeners>
      </source>
    </sources>
-->
  </system.diagnostics>

  <system.serviceModel>
    <diagnostics performanceCounters="ServiceOnly"/>  
  </system.serviceModel>
  
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/></startup></configuration>
