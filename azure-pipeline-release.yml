trigger:
  branches:
    include:
      - release

pool:
  vmImage: 'windows-latest'

steps:
- pwsh: |
    cd .\.build
    .\docs.ps1
  displayName: "Docs Check"

- pwsh: |
    cd .\.build
    .\CodeFormatter.ps1
  displayName: "Code Formatting Script"
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/release'))

- pwsh: |
    cd .\.build
    .\Build.ps1
  displayName: "Build Script"

- pwsh: |
    cd .\.build
    .\Pester.ps1
  displayName: "Running Invoke-Pester"

- task: EsrpCodeSigning@1
  condition: and(succeeded(), ne (variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
  inputs:
    ConnectedServiceName: 'CSS Exchange Code Sign'
    FolderPath: 'dist'
    Pattern: '*.ps1'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [
        {
          "keyCode": "CP-230012",
          "operationSetCode": "SigntoolSign",
          "parameters": [
            {
              "parameterName": "OpusName",
              "parameterValue": "CSS Exchange"
            },
            {
              "parameterName": "OpusInfo",
              "parameterValue": "https://github.com/microsoft/CSS-Exchange"
            },
            {
              "parameterName": "PageHash",
              "parameterValue": "/NPH"
            },
            {
              "parameterName": "FileDigest",
              "parameterValue": "/fd sha256"
            },
            {
              "parameterName": "TimeStamp",
              "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            }
          ],
          "toolName": "signtool.exe",
          "toolVersion": "6.2.9304.0"
        }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'

- pwsh: |
    cd .\.build
    .\BuildScriptVersions.ps1
  displayName: "Build ScriptVersions.txt"

- pwsh: |
    Get-Content dist\ScriptVersions.txt
  displayName: "Display Script Versions file"

- pwsh: |
    $tag = "v$((Get-Date).ToString(`"yy.MM.dd.HHmm`"))"
    Write-Host "##vso[task.setvariable variable=ReleaseTagValue]$tag"
    (Get-Content .\dist\ScriptVersions.txt) -replace '^(\S+.ps1)', ('[$1](https://github.com/microsoft/CSS-Exchange/releases/download/' + $tag + '/$1)') | Out-File dist\ScriptVersions.txt
    Get-Content dist\ScriptVersions.txt
  displayName: "Setting Script Versions text file"

- task: GitHubRelease@0
  displayName: 'Create GitHub Release - Draft'
  condition: and(succeeded(), ne (variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
  inputs:
    gitHubConnection: 'GitHub Release'
    repositoryName: microsoft/CSS-Exchange
    action: create
    tagSource: manual
    tagPattern: 'v[0-9].[0-9].[0-9].[0-9]'
    tag: $(ReleaseTagValue)
    title: $(ReleaseTagValue)
    releaseNotesSource: 'file'
    releaseNotesFile: dist\ScriptVersions.txt
    assets: |
      dist\*.ps1
      dist\*.nse
      dist\*.zip
      dist\*.txt
      dist\*.csv
    addChangeLog: true
    isDraft: true

- task: GitHubRelease@0
  displayName: 'Publish GitHub Release'
  condition: and(succeeded(), ne (variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
  inputs:
    gitHubConnection: 'GitHub Release'
    repositoryName: microsoft/CSS-Exchange
    action: edit
    tagSource: manual
    tagPattern: 'v[0-9].[0-9].[0-9].[0-9]'
    tag: $(ReleaseTagValue)
    title: $(ReleaseTagValue)
    releaseNotesSource: 'file'
    releaseNotesFile: dist\ScriptVersions.txt
    assetUploadMode: replace
    addChangeLog: true
    isDraft: false
