# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

<#
.SYNOPSIS
    This script can be used to remove vulnerable file types from the FIP-FS configuration.xml file.
.DESCRIPTION
    The script removes vulnerable file types from the FIP-FS configuration.xml file.
    It can also be used to add these file types back. It also allows you to completely disable the usage of the OutsideInModule
    or enable it back.
.PARAMETER Configuration
    Use this parameter to specify the configuration that should be changed.
    Values that can be passed with this parameter are: ConfigureOutsideIn and ConfigureFileTypes
.PARAMETER Action
    Use this parameter to specify the action that should be performed.
    Values that can be passed with this parameter are: Allow, Block
.PARAMETER ScriptUpdateOnly
    This optional parameter allows you to only update the script without performing any other actions.
.PARAMETER SkipVersionCheck
    This optional parameter allows you to skip the automatic version check and script update.
.EXAMPLE
    PS C:\> .\CVE-2024-xxxxx.ps1 -Configuration ConfigureFileTypes -Action Block
    It will block the vulnerable file types in the FIP-FS configuration file.
.EXAMPLE
    PS C:\> .\CVE-2024-xxxxx.ps1 -Configuration ConfigureFileTypes -Action Allow
    It will add the vulnerable file types back to the the FIP-FS configuration file.
.EXAMPLE
    PS C:\> .\CVE-2024-xxxxx.ps1 -Configuration ConfigureOutsideIn -Action Block
    It will disable the OutsideInModule in the FIP-FS configuration file.
.EXAMPLE
    PS C:\> .\CVE-2024-xxxxx.ps1 -Configuration ConfigureOutsideIn -Action Allow
    It will enable the OutsideInModule in the FIP-FS configuration file.
#>

[CmdletBinding(DefaultParameterSetName = "Default", SupportsShouldProcess = $true, ConfirmImpact = 'High')]
param(
    [Parameter(Mandatory = $false, ParameterSetName = "Default")]
    [ValidateSet("ConfigureOutsideIn", "ConfigureFileTypes")]
    [string]$Configuration = "ConfigureFileTypes",

    [Parameter(Mandatory = $false, ParameterSetName = "Default")]
    [ValidateSet("Allow", "Block")]
    [string]$Action = "Block",

    [Parameter(Mandatory = $false, ParameterSetName = "ScriptUpdateOnly")]
    [switch]$ScriptUpdateOnly,

    [Parameter(Mandatory = $false, ParameterSetName = "Default")]
    [switch]$SkipVersionCheck
)

begin {

    . $PSScriptRoot\ConfigurationAction\Invoke-OutsideInModuleAction.ps1
    . $PSScriptRoot\..\..\..\Shared\GenericScriptStartLogging.ps1
    . $PSScriptRoot\..\..\..\Shared\ScriptUpdateFunctions\GenericScriptUpdate.ps1

    $fileTypesDictionary = New-Object 'System.Collections.Generic.Dictionary[string, array]'

    # Add all vulnerable file types here that should be blocked
    $fileTypesDictionary.Add("Excel", @("ExcelStorage"))
    $fileTypesDictionary.Add("PreferOutsideIn", @("Html", "Pdf"))
} end {
    try {
        $invokeOutsideInModuleActionParams = @{
            Configuration = $Configuration
            Action        = $Action
        }

        if ($Configuration -eq "ConfigureFileTypes") {
            $invokeOutsideInModuleActionParams.Add("FileTypesDictionary", $fileTypesDictionary)
        }

        Invoke-OutsideInModuleAction @invokeOutsideInModuleActionParams
    } finally {
        Write-Host ""
        Write-Host "Do you have feedback regarding the script? Please let us know: ExToolsFeedback@microsoft.com."
    }
}
